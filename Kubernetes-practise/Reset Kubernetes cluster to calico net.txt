# Resetting Kubernetes Cluster
kubeadm reset

rm -rf /etc/cni/net.d

rm -rf rm -rf $HOME/.kube/config

# Add calico network

#master configuration. 

kubeadm init --pod-network-cidr=192.168.0.0/16
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

#install the calico plugin
kubectl create -f https://projectcalico.docs.tigera.io/manifests/tigera-operator.yaml
kubectl create -f https://projectcalico.docs.tigera.io/manifests/custom-resources.yaml
watch kubectl get pods -n calico-system
systemctl restart containerd
kubectl get nodes
kubectl get pod --all-namespaces

#worker config
#just copy paste the join command
#sometime we add another node . 
kubeadm token create --print-join-command


kubeadm join 10.4.0.4:6443 --token ci4zew.o7akko8s1i4btadd --discovery-token-ca-cert-hash sha256:989cad60ea3486e5fbe3ebba9e8f60e2b4f171a0949fb5d5773e85eb2dc451ea
kubectl describe nodes k8smaster

# To print the token again when another node joins
kubeadm token create --print-join-command

# kube system get pods
kubectl get pods -n kube-system

# Get pod information
kubectl get pod --all-namespaces -o wide
kubectl get pod --all-namespaces

# Create a pod
kubectl run myfirst-pod --image stacksimplify/kubenginx:1.0.0

# get pod details
kubectl describe pod myfirst-pod

# get pod information
kubectl get pod

# Edit pod manifests
kubectl edit pod myportfolio-pod

# Delete pod 
kubectl delete pod my-first-pod

# Expose pod to outside world
kubectl expose pod my-first-pod --type=NodePort --port=80 --name=my-first-service

# Get service details
kubectl get svc

# Get the details of the service
kubectl describe svc <servicename>

# Delete service
kubectl delete svc <servicename>

ClusterIP: Exposes the service on a cluster-internal IP. 
Choosing this value makes the service only reachable from within the cluster. This is the default ServiceType

NodePort: Exposes the service on each Node’s IP at a static port (the NodePort). 
A ClusterIP service, to which the NodePort service will route, is automatically created. 
You’ll be able to contact the NodePort service, from outside the cluster, by requesting <NodeIP>:<NodePort>.
A NodePort is a way to enable Kubernetes services to receive traffic from outside the cluster. 
In a NodePort, the Kubernetes API server allocates a specific port on each node in a cluster. 
Each node proxies any traffic received on the specific port to the Kubernetes service.

LoadBalancer: Exposes the service externally using a cloud provider’s load balancer. 
NodePort and ClusterIP services, to which the external load balancer will route, are automatically created.






